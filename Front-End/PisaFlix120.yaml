swagger: "2.0"
info:
  description: "If you like movies, PisaFLix is for you! Through this REST API you will be able to access our database containing all the information on the films you like the most."
  version: "1.0.0"
  title: "PisaFlix REST API"
host: "172.16.1.120:8080"
basePath: "/"
tags: 
- name: "Movies"
  description: "Movie collection"
schemes:
- "http"
paths:
  /movies:
    post:
      tags:
      - "movies"
      summary: "Add a new movie"
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie data"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        405:
          description: "Invalid input"

    put:
      tags:
      - "movies"
      summary: "Update an existing movie"
      description: ""
      operationId: "updateMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
        405:
          description: "Validation exception"

  /movies/{movieId}:
    get:
      tags:
      - "movies"
      summary: "Find movie by ID"
      description: "Returns a single movie"
      operationId: "getMovieById"
      produces:
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of Movie to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
    post:
      tags:
      - "movies"
      summary: "Updates a movie in the store with form data"
      description: ""
      operationId: "updateMovieWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of employe that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the movie"
        required: false
        type: "string"
      - name: "year"
        in: "formData"
        description: "Updated year of the movie"
        required: false
        type: "integer"
        format: "int64"
      - name: "director"
        in: "formData"
        description: "Updated director of the movie"
        required: false
        type: "string"
      - name: "genre"
        in: "formData"
        description: "Updated genre of the movie"
        required: false
        type: "string"
      - name: "description"
        in: "formData"
        description: "Updated description of the movie"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"

    delete:
      tags:
      - "movies"
      summary: "Deletes a movie"
      description: ""
      operationId: "deleteMovie"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "Movie id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"
  /movies/{movieName}{movieYear}:
    get:
      tags:
      - "movies"
      summary: "Find movie by name and year"
      description: "Returns a single movie"
      operationId: "getMovieByName"
      produces:
      - "application/json"
      parameters:
      - name: "movieName"
        in: "path"
        description: "Name of Movie to return"
        required: true
        type: "string"
      - name: "movieYear"
        in: "path"
        description: "Year of Movie to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Invalid name or year supplied"
        404:
          description: "Movie not found"

definitions:
  Movie:
    type: "object"
    required:
    - "name"
    - "year"
    - "director"
    - "genre"
    - "description"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Avatar"
      year:
        type: "integer"
        format: "int64"
        example: "2009"
      director:
        type: "string"
        example: "James Cameron"
      genre:
        type: "string"
        example: "action"
      description:
        type: "string"
        example: "A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home."
    xml:
      name: "Movie"
