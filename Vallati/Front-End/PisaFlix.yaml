swagger: "2.0"
info:
  description: "If you like movies, PisaFLix is for you! Through this REST API you will be able to access our database containing all the information on the films you like the most."
  version: "1.0.0"
  title: "PisaFlix REST API"
host: "hostname:8080"
basePath: "/"
tags: 
- name: "Movies"
  description: "Movie collection"
schemes:
- "http"
paths:
  /movies:
    get:
      tags: 
      - "Movies"
      summary: "Get films filtered"
      description: "Returns a list of movies"
      operationId: "getMovies"
      produces:
      - "application/json"
      parameters:
      - name: "movieName"
        in: "query"
        description: "Movie name filter"
        type: "string"
      - name: "movieYear"
        in: "query"
        description: "Movie year filter"
        type: "integer"
        format: "int64"
      - name: "director"
        in: "query"
        description: "Movie director filter"
        type: "string"
      - name: "genre"
        in: "query"
        description: "Movie genre filter"
        type: "string"
      responses:
        200:
          description: "It returns a list of all movies with filtered by the optionals parameters"
          schema:
            properties:
              movieList:
                type: array
                items:
                  $ref: "#/definitions/Movie"
    put:
      tags:
      - "Movies"
      summary: "Create or update a movie"
      description: ""
      operationId: "updateMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        200:
          description: "Movie added or updated"
        400:
          description: "Invalid fields provided"
    post:
      tags:
      - "Movies"
      summary: "Add a new movie"
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie data"
        required: true
        schema:
          $ref: "#/definitions/Movie-Data"
      responses:
        200:
          description: "Movie added sucefully"
          schema:
            properties:
              id:
                type: integer
                example: 23
        400:
          description: "Invalid fields provided"

    

  /movies/{movieId}:
    get:
      tags:
      - "Movies"
      summary: "Retrieve movie by ID"
      description: "Returns a single movie"
      operationId: "getMovieById"
      produces:
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of Movie to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"

    delete:
      tags:
      - "Movies"
      summary: "Deletes a movie"
      description: ""
      operationId: "deleteMovie"
      produces:
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "Movie id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200: 
          description: "Movie deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movie not found"   

definitions:
  Movie:
    type: "object"
    required:
    - "id"
    - "name"
    - "year"
    - "director"
    - "genre"
    - "description"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "Avatar"
      year:
        type: "integer"
        format: "int64"
        example: "2009"
      director:
        type: "string"
        example: "James Cameron"
      genre:
        type: "string"
        example: "action"
      description:
        type: "string"
        example: "A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home."
    xml:
      name: "Movie"
  Movie-Data:
    type: "object"
    required:
    - "name"
    - "year"
    - "director"
    - "genre"
    - "description"
    properties:
      name:
        type: "string"
        example: "Avatar"
      year:
        type: "integer"
        format: "int64"
        example: "2009"
      director:
        type: "string"
        example: "James Cameron"
      genre:
        type: "string"
        example: "action"
      description:
        type: "string"
        example: "A paraplegic Marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home."
    xml:
      name: "MovieData"
