# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Movie(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, year: int=None, director: str=None, genre: str=None, description: str=None):  # noqa: E501
        """Movie - a model defined in Swagger

        :param id: The id of this Movie.  # noqa: E501
        :type id: int
        :param name: The name of this Movie.  # noqa: E501
        :type name: str
        :param year: The year of this Movie.  # noqa: E501
        :type year: int
        :param director: The director of this Movie.  # noqa: E501
        :type director: str
        :param genre: The genre of this Movie.  # noqa: E501
        :type genre: str
        :param description: The description of this Movie.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'year': int,
            'director': str,
            'genre': str,
            'description': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'year': 'year',
            'director': 'director',
            'genre': 'genre',
            'description': 'description'
        }

        self._id = id
        self._name = name
        self._year = year
        self._director = director
        self._genre = genre
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Movie':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Movie of this Movie.  # noqa: E501
        :rtype: Movie
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Movie.


        :return: The id of this Movie.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Movie.


        :param id: The id of this Movie.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Movie.


        :return: The name of this Movie.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Movie.


        :param name: The name of this Movie.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def year(self) -> int:
        """Gets the year of this Movie.


        :return: The year of this Movie.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this Movie.


        :param year: The year of this Movie.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    @property
    def director(self) -> str:
        """Gets the director of this Movie.


        :return: The director of this Movie.
        :rtype: str
        """
        return self._director

    @director.setter
    def director(self, director: str):
        """Sets the director of this Movie.


        :param director: The director of this Movie.
        :type director: str
        """
        if director is None:
            raise ValueError("Invalid value for `director`, must not be `None`")  # noqa: E501

        self._director = director

    @property
    def genre(self) -> str:
        """Gets the genre of this Movie.


        :return: The genre of this Movie.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this Movie.


        :param genre: The genre of this Movie.
        :type genre: str
        """
        if genre is None:
            raise ValueError("Invalid value for `genre`, must not be `None`")  # noqa: E501

        self._genre = genre

    @property
    def description(self) -> str:
        """Gets the description of this Movie.


        :return: The description of this Movie.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Movie.


        :param description: The description of this Movie.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description
